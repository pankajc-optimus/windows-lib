using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Services;
using System.Net;
using System.Text;
using System.IO;

namespace NotificationService
{
    /// <summary>
    /// Send Push Notifications to Windows Phone 7 Devices
    /// with or without navigational Parameters.
    /// </summary>
    [WebService(Namespace = "http://tempuri.org/")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [System.ComponentModel.ToolboxItem(false)]

    public class NotificationService : System.Web.Services.WebService
    {
        private static Dictionary<String, String> _deviceList = new Dictionary<String, String>();

        /// <summary>
        /// Adds a device to Subscription list.
        /// </summary>
        /// <param name="deviceID">Device unique ID</param>
        /// <param name="subscribeUri">Uri generated by Microsoft push Notification Server.</param>
        /// <returns>bool</returns>
        [WebMethod]
        public bool SaveToDeviceList(String deviceID, String subscribeUri)
        {

            bool subscriptionSuccessfull = true;
            try
            {
                _deviceList[deviceID] = subscribeUri;
            }
            catch
            {
                subscriptionSuccessfull = false;
            }
            return subscriptionSuccessfull;

        }

        /// <summary>
        /// Removes a device form Subscription list.
        /// </summary>
        /// <param name="deviceID">Device unique ID</param>
        /// <returns>bool</returns>
        [WebMethod]
        public bool RemoveFromDeviceList(String deviceID)
        {

            bool unsubscriptionSuccessfull = true;
            try
            {
                unsubscriptionSuccessfull = _deviceList.Remove(deviceID);
            }
            catch
            {
                unsubscriptionSuccessfull = false;
            }
            return unsubscriptionSuccessfull;


        }

        /// <summary>
        /// Send Notifications with Title and Message.
        /// Title property:-Bold,Maximum length of 40 characters.
        /// Message property:-Maximum length of 47 characters.
        /// or both with length less than 47 characters.
        /// </summary>
        /// <param name="title">Title text</param>
        /// <param name="message">Message text</param>
        /// <returns>bool</returns>
        [WebMethod]
        public bool Notification(String title, string message)
        {
            // Create the toast message.
            string toastMessage = "<?xml version=\"1.0\" encoding=\"utf-8\"?>" +
            "<wp:Notification xmlns:wp=\"WPNotification\">" +
               "<wp:Toast>" +
                    "<wp:Text1>" + title + "</wp:Text1>" +
                    "<wp:Text2>" + message + "</wp:Text2>" +
               "</wp:Toast> " +
            "</wp:Notification>";

            byte[] notificationMessage = Encoding.Default.GetBytes(toastMessage);
            bool sentSuccessfully = true;

                try
                {
                    foreach (String uri in _deviceList.Values)
                    {
                        HttpWebRequest sendNotificationRequest = (HttpWebRequest)WebRequest.Create(uri);
                        sendNotificationRequest.Method = "POST";

                        // Web request header
                        sendNotificationRequest.ContentLength = notificationMessage.Length;
                        sendNotificationRequest.ContentType = "text/xml";
                        sendNotificationRequest.Headers.Add("X-WindowsPhone-Target", "toast");
                        sendNotificationRequest.Headers.Add("X-NotificationClass", "2");
                        using (Stream requestStream = sendNotificationRequest.GetRequestStream())
                        {
                            requestStream.Write(notificationMessage, 0, notificationMessage.Length);
                        }

                    }
                }
                catch (Exception e)
                {
                    System.Diagnostics.Debug.WriteLine("Error: " + e.Message + "\n" + e.Data + "\n" + e.StackTrace);
                    sentSuccessfully = false;
                }
            
            return sentSuccessfully;
        }

        /// <summary>
        /// Send Notifications with Title,Message and
        /// navigation parameters i.e relative uri
        /// of the page to navigate to when toast notification is clicked.
        /// 
        /// Title property:- Bold,Maximum length of 40 characters.
        /// Message property:- Maximum length of 47 characters.
        /// or both with length less than 47 characters.
        /// </summary>
        /// <param name="title">Title</param>
        /// <param name="message">Message</param>
        /// <param name="param">Relative uri for Navigation</param>
        /// <returns>bool</returns>
        [WebMethod]
        public bool NotificationParam(String title, String message, String param)
        {
            // Message.
            string toastMessage = "<?xml version=\"1.0\" encoding=\"utf-8\"?>" +
            "<wp:Notification xmlns:wp=\"WPNotification\">" +
               "<wp:Toast>" +
                    "<wp:Text1>" + title + "</wp:Text1>" +
                    "<wp:Text2>" + message + "</wp:Text2>" +
                    "<wp:Param>" + param + "</wp:Param>" +
               "</wp:Toast> " +
            "</wp:Notification>";

            bool sentSuccessfully = true;
            byte[] notificationMessage = Encoding.Default.GetBytes(toastMessage);
                try
                {
                    foreach (String uri in _deviceList.Values)
                    {
                        HttpWebRequest sendNotificationRequest = (HttpWebRequest)WebRequest.Create(uri);
                        sendNotificationRequest.Method = "POST";
                        // Web request header
                        sendNotificationRequest.ContentLength = notificationMessage.Length;
                        sendNotificationRequest.ContentType = "text/xml";
                        sendNotificationRequest.Headers.Add("X-WindowsPhone-Target", "toast");
                        sendNotificationRequest.Headers.Add("X-NotificationClass", "2");
                        using (Stream requestStream = sendNotificationRequest.GetRequestStream())
                        {
                            requestStream.Write(notificationMessage, 0, notificationMessage.Length);
                        }
                    }
                }
                catch (Exception e)
                {
                    System.Diagnostics.Debug.WriteLine("Error: " + e.Message + "\n" + e.Data + "\n" + e.StackTrace);
                    sentSuccessfully = false;
                }
            
            return sentSuccessfully;
        }
    }
}
